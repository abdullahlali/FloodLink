/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.5
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-e95448d5.js');
const index$2 = require('./index-5cfcbc22.js');
const index$3 = require('./index-04f8523d.js');
const useViewModel = require('./useViewModel-2f7be34c.js');
const globalCss = require('./globalCss-46270257.js');
const index$1 = require('./index-f2bbe6e8.js');
require('./component-utils-e4944926.js');

const css = {
    base: "esri-fullscreen",
};
const useFullscreenViewModel = useViewModel.makeViewModelController(index$3.newWidgetsFullscreenFullscreenViewModel);
const ArcgisFullscreen = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = index$1.useControllerManager(this);
        this.messages = useViewModel.useT9n();
        this.viewModel = useFullscreenViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = index$2.usePropertyChange()("state");
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._toggle = () => {
            this.viewModel.toggle();
        };
        this.element = this.viewModel.element;
        this.icon = "zoom-out-fixed";
        this.autoDestroyDisabled = false;
        this.label = undefined;
        this.messageOverrides = undefined;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.state = this.viewModel.state;
    }
    get fullscreenTitle() {
        const state = this.viewModel?.state;
        return state === "active" ? this.messages.exit : state === "ready" ? this.messages.enter : "";
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async destroy() {
        await this.manager.destroy();
    }
    render() {
        const { fullscreenTitle, icon } = this;
        const state = this.viewModel?.state;
        const hidden = state === "feature-unsupported";
        const defaultIcon = state === "ready" || state === "disabled" || state === "feature-unsupported" ? "zoom-out-fixed" : "zoom-in-fixed";
        return (index.h("div", { key: '5d3b80390d99dce53b37fd7f04c24214e2042c9f', class: index$3.classes(css.base, globalCss.globalCss.widget) }, !hidden && (index.h("calcite-button", { key: 'a5b2030e37a66159a36fe92edf28d635fbdabbc4', class: globalCss.globalCss.widgetButton, disabled: state === "disabled", "icon-start": icon ?? defaultIcon, kind: "neutral", label: fullscreenTitle, onClick: this._toggle, title: fullscreenTitle }))));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return index.getElement(this); }
};

exports.arcgis_fullscreen = ArcgisFullscreen;
